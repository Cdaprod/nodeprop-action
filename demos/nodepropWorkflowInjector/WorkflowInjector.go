package nodeprop

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/google/go-github/v66/github"
	"golang.org/x/oauth2"
)

// WorkflowInjector defines the interface for injecting a workflow
type WorkflowInjector interface {
	InjectWorkflow(ctx context.Context, client *github.Client, owner, repo, branch, path, content string) error
}

// NodePropWorkflowInjector implements the WorkflowInjector interface
type NodePropWorkflowInjector struct{}

// InjectWorkflow injects a workflow file into a repository for the nodeprop package
func (n *NodePropWorkflowInjector) InjectWorkflow(ctx context.Context, client *github.Client, owner, repo, branch, path, content string) error {
	// Get the reference to the branch
	ref, _, err := client.Git.GetRef(ctx, owner, repo, "refs/heads/"+branch)
	if err != nil {
		return fmt.Errorf("error getting branch reference: %w", err)
	}

	// Create a new blob with the workflow content
	blob := &github.Blob{
		Content:  github.String(content),
		Encoding: github.String("utf-8"),
	}
	blobRes, _, err := client.Git.CreateBlob(ctx, owner, repo, blob)
	if err != nil {
		return fmt.Errorf("error creating blob: %w", err)
	}

	// Create a new tree entry with the workflow file
	treeEntry := &github.TreeEntry{
		Path: github.String(path),
		Mode: github.String("100644"),
		Type: github.String("blob"),
		SHA:  blobRes.SHA,
	}

	// Create a new tree with the workflow file entry
	treeSHA := ref.Object.SHA
	newTree, _, err := client.Git.CreateTree(ctx, owner, repo, *treeSHA, []*github.TreeEntry{treeEntry})
	if err != nil {
		return fmt.Errorf("error creating tree: %w", err)
	}

	// Get the parent commit for the branch
	parentCommit, _, err := client.Repositories.GetCommit(ctx, owner, repo, *treeSHA, nil)
	if err != nil {
		return fmt.Errorf("error getting parent commit: %w", err)
	}

	// Create a new commit with the updated tree
	commit := &github.Commit{
		Message: github.String("Inject NodeProp workflow file"),
		Tree:    newTree,
		Parents: []*github.Commit{parentCommit.Commit},
	}
	newCommit, _, err := client.Git.CreateCommit(ctx, owner, repo, commit)
	if err != nil {
		return fmt.Errorf("error creating commit: %w", err)
	}

	// Update the reference to point to the new commit
	ref.Object.SHA = newCommit.SHA
	_, _, err = client.Git.UpdateRef(ctx, owner, repo, ref, false)
	if err != nil {
		return fmt.Errorf("error updating reference: %w", err)
	}

	return nil
}

// Main function to inject the workflow
func main() {
	ctx := context.Background()
	ts := oauth2.StaticTokenSource(
		&oauth2.Token{AccessToken: "YOUR_GITHUB_TOKEN"},
	)
	tc := oauth2.NewClient(ctx, ts)

	client := github.NewClient(tc)

	injector := &NodePropWorkflowInjector{}

	// Define the workflow content
	workflowContent := `
name: Generate NodeProp Configuration

on:
  push:
    branches: [ '**' ]
    paths-ignore:
      - '.nodeprop.yml'
      - '**.md'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  generate-config:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Generate NodeProp Configuration
        uses: Cdaprod/nodeprop-action@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          config-file: '.nodeprop.yml'

      - name: Commit Changes
        if: success()
        run: |
          if [[ -n $(git status --porcelain .nodeprop.yml) ]]; then
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            
            git add .nodeprop.yml
            
            git commit -m "Update NodeProp Configuration\n\nGenerated by: ${{ github.workflow }}\nEvent: ${{ github.event_name }}"
            
            git push
          else
            echo "No changes to commit"

      - name: Create Status Check
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" = "success" ]; then
            DESC="NodeProp configuration generated successfully"
          else
            DESC="Failed to generate NodeProp configuration"
          fi

          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "state": "'"${STATUS,,}"'",
              "target_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "description": "'"$DESC"'",
              "context": "NodeProp/config"
            }' \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}"
`

	err := injector.InjectWorkflow(ctx, client, "owner-name", "repo-name", "main", ".github/workflows/generate-nodeprop.yml", workflowContent)
	if err != nil {
		log.Fatalf("Failed to inject workflow: %v", err)
	}

	fmt.Println("NodeProp workflow injected successfully.")
}